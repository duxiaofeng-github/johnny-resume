.typing(@charCount, @interval, @delay) {
  @duration: @charCount * @interval;

  &:after {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;
    width: 0;
    background: @color-background;
    animation: typing unit(@duration, s) steps(@charCount) unit(@delay, s);
  }
}

.screenTyping(@count, @preDuration) when (@count <= @typingScreenCount) {
  @charCount: `typingCaculator.charCount(@{count})`;
  @interval: `typingCaculator.interval`;
  @delay: `typingCaculator.typingDelay(@{preDuration})`;
  @duration: `typingCaculator.typingDuration(@{charCount})`;
  @fadeout-delay: `typingCaculator.fadeoutDelay(@{delay}, @{duration})`;
  @fadeout-duration: `typingCaculator.fadeoutDuration`;

  .screen-typing-@{count} {
    position: relative;
    height: 0;
    overflow: hidden;
    white-space: nowrap;
    animation: screen-typing-show unit(@duration, s) ease unit(@delay, s),
      screen-typing-fadeout unit(@fadeout-duration, s) unit(@fadeout-delay, s);
    animation-fill-mode: forwards;

    .typing(@charCount, @interval, @delay);
  }

  .screenTyping((@count + 1), @fadeout-delay + @fadeout-duration);
}

.welcome {
  top: 33.33%;
  left: 33.33%;
  font-size: 4vmax;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 1;

  .screenTyping(1, 0);

  .screen-avatar {
    @typeCompleteTime: 0;//`typingCaculator.typingCompleteAt(@{typingScreenCount})`;
    position: absolute;
    top: 0;
    left: 0;
    height: 0;
    width: 100%;
    animation: screen-avatar-show 0s ease unit(@typeCompleteTime, s);
    animation-fill-mode: forwards;

    .avatar-wrapper {
      position: absolute;
      left: 50%;
      top: 50%;
      width: 10vmax;
      padding-top: 10vmax;
      margin-left: -5%;
      margin-top: -5%;

      .avatar {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        vertical-align: top;
        transform: scale(0);
        animation: spot-fadein .7s ease-in unit(@typeCompleteTime, s);
        animation-fill-mode: forwards;

        &:hover {

        }
      }

      .background-wave {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 100%;
        opacity: 0;
        border-radius: 50%;

        &.min {
          background-color: #cddbf1;
          animation: wave-min 3s ease unit(@typeCompleteTime + .7, s) infinite;
        }

        &.medium {
          background-color: #dde8f9;
          animation: wave-medium 3s ease unit(@typeCompleteTime + .7, s) infinite;
        }

        &.max {
          background-color: #eef4fc;
          animation: wave-max 3s ease unit(@typeCompleteTime + .7, s) infinite;
        }
      }
    }

    .spotBackground(@count) when (@count <= @spotCount) {
      @scaleRatio: 1.6 - (@count - 1) * 0.1;
      @spotOffset: `(function() {
          this.spotOffset@{count} = this.spotOffset@{count} ? this.spotOffset@{count} : util.randomInt(140000, 180000) / 100000;
          return this.spotOffset@{count};
      })()`;
      @length: @spotOffset + 12;
      @deg: `360/@{spotCount}*"@{spotAxisArray}".split(", ")[@{count}-1]`;
      @degOffset: `util.randomInt(-10, 10)`;
      @absDeg: `spotCaculator.getAbsDeg(@{deg}+@{degOffset})`;
      @xAbs: cos(unit(@absDeg, deg)) * @length;
      @x: `@{xAbs} * (@{deg} < 90 || @{deg} >= 270 ? 1 : -1)`;
      @yAbs: sin(unit(@absDeg, deg)) * @length;
      @y: `@{yAbs} * ((@{deg} > 180 && @{deg} <= 360) || @{deg} < 0 ? 1 : -1)`;

      @keyframes ~"spot-@{count}-bound" {
        0% {
          transform:scale(0);
          left: 50%;
          top: 50%;
          width: 0;
          padding-top: 0;
          opacity: 0;
        }
        100% {
          transform:scale(1);
          left: calc(~"50% + @{x}vmax");
          top: calc(~"50% + @{y}vmax");
          width: 8vmax - unit(@count/1.3, vmax);
          padding-top: 8vmax - unit(@count/1.3, vmax);
          opacity: 1;
        }
      }

      @keyframes ~"spot-@{count}-transition" {
        0% {
          transform:scale(1);
          left: calc(~"50% + @{x}vmax");
          top: calc(~"50% + @{y}vmax");
          width: 8vmax - unit(@count/1.3, vmax);
          padding-top: 8vmax - unit(@count/1.3, vmax);
          opacity: 1;
        }
        100% {
          transform:scale(1);
          left: ~`spotCaculator.getTransitionLeft(@{deg})`;
          top: ~`spotCaculator.getTransitionTop(@{deg})`;
          width: 8vmax - unit(@count/1.3, vmax);
          padding-top: 8vmax - unit(@count/1.3, vmax);
          opacity: 1;
        }
      }

      &.spot-@{count} {
        background-color: color(`"@{spotColorArray}".split(", ")[@{count}-1]`);
        transform:scale(@scaleRatio);
        font-size: 3vmax - unit(@count/5, vmax);
        margin-left: -(8vmax - unit(@count/1.3, vmax))/2;
        margin-top: -(8vmax - unit(@count/1.3, vmax))/2;
        animation: ~"spot-@{count}-bound" unit(`util.randomInt(5, 10) / 10`, s) ease-out unit(@typeCompleteTime + 1, s)+unit(`util.randomInt(5, 10) / 10`, s);
        animation-fill-mode: forwards;

        &:hover {
          background-color: saturate(lighten(color(`"@{spotColorArray}".split(", ")[@{count}-1]`), 5%), 20%);
        }

        i {
          line-height: 8vmax - unit(@count/1.3, vmax);
        }
      }

      &.spot-@{count}-transition {
        animation: ~"spot-@{count}-transition" unit(`util.randomInt(5, 10) / 10`, s) ease-out .3s;
        animation-fill-mode: forwards;
      }

      .spotBackground((@count + 1))
    }

    .spot {
      position: absolute;
      left: 50%;
      top: 50%;
      width: 0;
      height: 0;
      padding-top: 0;
      border-radius: 50%;
      color: #fff;
      cursor: pointer;
      overflow: hidden;
      transition: background-color .5s ease-out;

      i {
        position: absolute;
        left: 0;
        top: 0;
        text-align: center;
        width: 100%;
      }
      
      .spotBackground(1);
    }
  }
}

